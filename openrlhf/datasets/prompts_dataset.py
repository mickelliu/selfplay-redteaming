from torch.utils.data import Dataset
from tqdm import tqdm


def preprocess_data(data, input_template=None, input_key="input", label_key=None, apply_chat_template=None) -> str:
    if apply_chat_template:
        chat = data[input_key]
        if isinstance(chat, str):
            chat = [{"role": "user", "content": chat}]
        prompt = apply_chat_template(chat, tokenize=False, add_generation_prompt=True)
    else:
        prompt = data[input_key]
        if input_template:
            prompt = input_template.format(prompt)

    # for Reinforced Fine-tuning
    label = "" if label_key is None else data[label_key]
    return prompt, label


class PromptDataset(Dataset):
    """
    Dataset for PPO model

    Args:
        dataset: dataset for PPO model
        tokenizer: tokenizer for PPO model
        max_length: max length of input
    """

    def __init__(
        self,
        dataset,
        tokenizer,
        strategy,
        input_template=None,
    ) -> None:
        super().__init__()
        self.strategy = strategy
        self.tokenizer = tokenizer

        # chat_template
        self.input_template = input_template
        input_key = getattr(self.strategy.args, "input_key", None)
        label_key = getattr(self.strategy.args, "label_key", None)
        apply_chat_template = getattr(self.strategy.args, "apply_chat_template", False)

        if apply_chat_template:
            apply_chat_template = self.tokenizer.apply_chat_template

        self.prompts = []
        self.labels = []
        for data in tqdm(dataset, desc="Preprocessing data", disable=not self.strategy.is_rank_0()):
            prompt, label = preprocess_data(data, input_template, input_key, label_key, apply_chat_template)
            self.prompts.append(prompt)
            self.labels.append(label)

    def __len__(self):
        length = len(self.prompts)
        return length

    def __getitem__(self, idx):
        return self.prompts[idx], self.labels[idx]


class postfillCOTPromptDataset(PromptDataset):
    """
    Dataset for postfill COT, do not use it for training, for batch_inference only
    """
    def __init__(self, dataset, tokenizer, strategy, input_template=None):
        self.strategy = strategy
        self.tokenizer = tokenizer

        # chat_template
        self.input_template = input_template
        # a prompt data has two keys: prompt and completion
        prompt_key, completion_key = "vanilla", "sftchat_completion"

        self.prompts = []
        for data in tqdm(dataset, desc="Preprocessing data", disable=not self.strategy.is_rank_0()):
            self.prompts.append((data[prompt_key], data[completion_key]))

    def __len__(self):
        length = len(self.prompts)
        return length

    def __getitem__(self, idx):
        return self.prompts[idx]
        

class RedTeamGamePromptDataset(PromptDataset):
    """
    Dataset for Red Team Game
    """
    def __init__(self, dataset, tokenizer, strategy, input_template=None, mark_to_generate=True):
        self.strategy = strategy
        self.tokenizer = tokenizer
        self.custom_configs = strategy.args.custom_configs
        # wildjb dataset has four keys: dict_keys(['vanilla', 'adversarial', 'completion', 'data_type'])
        self.prompts = []
        self.labels = []

        for data in tqdm(dataset, desc="Preprocessing data", disable=not self.strategy.is_rank_0()):

            completion = ""
            if data['data_type'] in ["adversarial_harmful", "adversarial_benign"]:
                prompt_label = 'adversarial'
            elif data['data_type'] in ["vanilla_harmful", "vanilla_benign"]:
                prompt_label = 'vanilla'
                if data['data_type'] == "vanilla_benign":
                    completion = data['completion']
            else:
                raise ValueError(f"Invalid data type: {data['data_type']}")
                    
            self.prompts.append((data[prompt_label], completion))
            self.labels.append(data['data_type'])
        
        if not self.custom_configs.get('no_attacker_turn', False):
            if mark_to_generate:
                self._mark_prompts_to_generate(strategy)

    def _mark_prompts_to_generate(self, strategy):
        # Mark percentage of prompts from both benign and harmful datasets to be generated by the attacker
        percent_generated_harmful, percent_generated_benign = 0.5, 0.5
        # generate everything if we are training the attacker only
        # if self.custom_configs['no_defender_turn']:
        #     percent_generated_harmful, percent_generated_benign = 1.0, 1.0

        seed = strategy.args.seed
        
        # Set random seed for reproducibility
        import random
        random.seed(seed)
        
        # Separate prompts by type
        harmful_indices = [i for i, label in enumerate(self.labels) if "harmful" in label]
        benign_indices = [i for i, label in enumerate(self.labels) if "benign" in label]
        
        # Randomly select indices to be generated
        num_harmful_to_generate = int(len(harmful_indices) * percent_generated_harmful)
        num_benign_to_generate = int(len(benign_indices) * percent_generated_benign)
        
        harmful_to_generate = random.sample(harmful_indices, num_harmful_to_generate)
        benign_to_generate = random.sample(benign_indices, num_benign_to_generate)
        
        # Log statistics if rank 0
        
        strategy.print(f"Total prompts: {len(self.prompts)}")
        strategy.print(f"Harmful prompts: {len(harmful_indices)}, {num_harmful_to_generate} to be generated by revision")
        strategy.print(f"Benign prompts: {len(benign_indices)}, {num_benign_to_generate} to be generated by revision")
        
        # change self.prompts and self.labels accordingly
        for i in range(len(self.labels)):
            if i in harmful_to_generate:
                self.labels[i] = "generated_harmful"
            elif i in benign_to_generate:
                self.labels[i] = "generated_benign"







